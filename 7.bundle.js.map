{"version":3,"sources":["webpack:///./src/components/Slide/Loadable.ts","webpack:///./src/components/Slideshow/useTrackSlideshowScroll.ts","webpack:///./src/components/Slideshow/index.tsx","webpack:///./src/components/Slideshow/useSyncSlideshow.ts","webpack:///./src/components/Preview/usePresentation.ts","webpack:///./src/components/Preview/usePresentationSlideNavigation.ts","webpack:///./src/components/Preview/worker.ts","webpack:///./src/components/Preview/markdown-worker.ts","webpack:///./src/components/Preview/index.tsx","webpack:///./src/components/Preview/useWorker.ts","webpack:///./src/components/TextEditor/TextArea.ts","webpack:///./src/utils/usePaneIsActive.ts"],"names":["Slide","loadable","module","useTrackSlideshowScroll","dispatch","entries","isActive","ref","handleScroll","useMemo","throttle","lineNumber","withinBounds","R","TEXT_AREA_LINE_HEIGHT","topElement","Object","find","entry","getBoundingClientRect","top","parseInt","type","MarkdownContextReducerActionType","SetSlideshowLineNumber","slideshowLineNumber","useEffect","node","current","addEventListener","passive","removeEventListener","Article","styled","article","ForwardRefSlideshowComponent","forwardRef","htmlArray","textLineNumber","usePaneIsActive","initialValue","useCodeLineEntries","dataLineElement","scrollIntoView","block","useSyncSlideshow","id","map","html","i","key","htmlString","index","Slideshow","memo","usePresentation","slideshowRef","useState","togglePresentation","slideNumber","setSlideNumber","slideEntries","useSlideEntries","slideCount","keys","length","nextSlide","useCallback","previousSlide","handleKeyDown","e","preventDefault","keyCode","document","useSlideNavigation","requestPresentation","screenfull","request","sf","setIsActive","isFullscreen","on","off","Worker","MarkdownWorker","this","worker","onmessage","data","SetHtmlArray","md","postMessage","terminate","Div","div","FullscreenButton","button","Preview","useRef","useMarkdownDispatch","useMarkdownState","workerRef","_a","parse","useWorker","disabled","MARKDOWN_CONTEXT_DEFAULT_INITIAL_STATE","onClick","TextArea","textarea","props","theme","textColor","debounceSetIsActive","debounce","value","handleMouseEnter","handleMouseLeave"],"mappings":"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","file":"7.bundle.js","sourcesContent":["/**\n * Asynchronously loads the component for Slide\n */\nimport { loadable } from \"utils/loadable\";\nconst Slide = loadable(() => import(\"./index\"), (module) => module.Slide);\nexport { Slide };\n","import { useEffect, useMemo } from \"react\";\nimport * as R from \"ramda\";\nimport throttle from \"lodash/throttle\";\nimport { MarkdownContextReducerActionType, } from \"types/markdown-context-reducer-action\";\nimport { TEXT_AREA_LINE_HEIGHT } from \"components/TextEditor/TextArea\";\nfunction useTrackSlideshowScroll({ dispatch, entries, isActive, ref, }) {\n    /*\n     * Finds the top most element in view (within 0px - 18px from the top)\n     * IF element THEN set `slideshowLineNumber` to it's data-line number\n     */\n    const handleScroll = useMemo(() => throttle(() => {\n        const withinBounds = R.both(R.gte(R.__, 0), R.lte(R.__, TEXT_AREA_LINE_HEIGHT));\n        const isTopElement = (e) => withinBounds(e.getBoundingClientRect().top);\n        const setLineNumber = (lineNumber) => dispatch({\n            type: MarkdownContextReducerActionType.SetSlideshowLineNumber,\n            slideshowLineNumber: lineNumber,\n        });\n        const topElement = Object.entries(entries).find(([, entry]) => isTopElement(entry));\n        if (topElement)\n            setLineNumber(parseInt(topElement[0], 10));\n    }, 100), [dispatch, entries]);\n    /* Adds/Removes event listener on 'scroll' depending on pane `isActive` */\n    useEffect(() => {\n        const node = ref.current;\n        isActive\n            ? node === null || node === void 0 ? void 0 : node.addEventListener(\"scroll\", handleScroll, { passive: true }) : node === null || node === void 0 ? void 0 : node.removeEventListener(\"scroll\", handleScroll);\n        return () => node === null || node === void 0 ? void 0 : node.removeEventListener(\"scroll\", handleScroll);\n    }, [isActive, handleScroll, ref]);\n}\nexport { useTrackSlideshowScroll };\n","import React, { forwardRef, memo } from \"react\";\nimport type { Dispatch } from \"react\";\nimport styled from \"styled-components\";\n\nimport type { MarkdownContextReducerAction } from \"types/markdown-context-reducer-action\";\n\nimport { useCodeLineEntries } from \"contexts/CodeLineObserver\";\n\nimport { Slide } from \"components/Slide/Loadable\";\nimport { usePaneIsActive } from \"utils/usePaneIsActive\";\nimport { useSyncSlideshow } from \"./useSyncSlideshow\";\nimport { useTrackSlideshowScroll } from \"./useTrackSlideshowScroll\";\n\ninterface SlideshowProps {\n  dispatch: Dispatch<MarkdownContextReducerAction>;\n  htmlArray: HtmlArray;\n  textLineNumber: LineNumber;\n}\n\nconst Article = styled.article`\n  height: 100%;\n  overflow: auto;\n\n  &:fullscreen {\n    scroll-snap-type: y mandatory;\n\n    .slide {\n      display: grid;\n      height: 100%;\n      scroll-snap-align: start;\n      svg {\n        margin: auto;\n      }\n    }\n  }\n\n  &:-webkit-full-screen {\n    background-color: rgba(255, 255, 255, 0);\n\n    .slide {\n      display: grid;\n      height: 100%;\n      svg {\n        margin: auto;\n      }\n    }\n  }\n`;\n\nconst ForwardRefSlideshowComponent = forwardRef<HTMLElement, SlideshowProps>(\n  ({ dispatch, htmlArray, textLineNumber }, ref) => {\n    const isActive = usePaneIsActive({ ref, initialValue: false });\n    const entries = useCodeLineEntries();\n\n    useSyncSlideshow({ entries, textLineNumber });\n    useTrackSlideshowScroll({ dispatch, entries, isActive, ref });\n\n    return (\n      <Article ref={ref} id=\"slideshow\">\n        {htmlArray.map((html, i) => (\n          <Slide key={`slide-${i + 1}`} htmlString={html} index={i} />\n        ))}\n      </Article>\n    );\n  }\n);\n\nconst Slideshow = memo(ForwardRefSlideshowComponent);\n\nexport { Slideshow };\n","import { useEffect } from \"react\";\nimport scrollIntoView from \"smooth-scroll-into-view-if-needed\";\nfunction useSyncSlideshow({ entries, textLineNumber, }) {\n    /* Syncs slideshow when textLineNumber changes */\n    useEffect(() => {\n        const dataLineElement = entries[textLineNumber];\n        if (dataLineElement)\n            scrollIntoView(dataLineElement, { block: \"start\" });\n    }, [entries, textLineNumber]);\n}\nexport { useSyncSlideshow };\n","import { useCallback, useEffect, useState } from \"react\";\nimport screenfull from \"screenfull\";\nimport { useSlideNavigation } from \"./usePresentationSlideNavigation\";\nfunction usePresentation(slideshowRef) {\n    const [isActive, togglePresentation] = useState(false);\n    useSlideNavigation(isActive);\n    const requestPresentation = useCallback(() => {\n        if (slideshowRef.current)\n            screenfull.request(slideshowRef.current);\n    }, [slideshowRef]);\n    useEffect(() => {\n        const sf = screenfull; // for Typescript\n        const setIsActive = () => togglePresentation(sf.isFullscreen);\n        sf.on(\"change\", setIsActive);\n        return () => sf.off(\"change\", setIsActive);\n    }, []);\n    return requestPresentation;\n}\nexport { usePresentation };\n","import { useCallback, useEffect, useState } from \"react\";\nimport scrollIntoView from \"smooth-scroll-into-view-if-needed\";\nimport { useSlideEntries } from \"contexts/SlideObserver\";\nconst INITIAL_SLIDE_NUMBER = 1;\nfunction useSlideNavigation(isActive) {\n    const [slideNumber, setSlideNumber] = useState(INITIAL_SLIDE_NUMBER);\n    const slideEntries = useSlideEntries();\n    const slideCount = Object.keys(slideEntries).length;\n    // Resets slide number when isActive updates\n    useEffect(() => setSlideNumber(INITIAL_SLIDE_NUMBER), [isActive]);\n    // Scrolls to slide when slide number updates\n    useEffect(() => {\n        if (isActive)\n            scrollIntoView(slideEntries[slideNumber]);\n    }, [isActive, slideNumber, slideEntries]);\n    const nextSlide = useCallback(() => setSlideNumber((current) => current < slideCount ? current + 1 : current), [slideCount]);\n    const previousSlide = useCallback(() => setSlideNumber((current) => current > INITIAL_SLIDE_NUMBER ? current - 1 : current), []);\n    // Keydown slide navigation\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            e.preventDefault();\n            switch (e.keyCode) {\n                case 37: // ArrowLeft\n                case 38: // ArrowUp\n                    previousSlide();\n                    break;\n                case 39: // ArrowRight\n                case 40: // ArrowDown\n                    nextSlide();\n                    break;\n                default: {\n                    break;\n                }\n            }\n        };\n        isActive\n            ? document.addEventListener(\"keydown\", handleKeyDown)\n            : document.removeEventListener(\"keydown\", handleKeyDown);\n        return () => document.removeEventListener(\"keydown\", handleKeyDown);\n    }, [nextSlide, previousSlide, isActive]);\n    return slideNumber;\n}\nexport { INITIAL_SLIDE_NUMBER, useSlideNavigation };\n","export default function() {\n  return new Worker(__webpack_public_path__ + \"bundle.worker.js\");\n}\n","import Worker from \"worker-loader!./worker\"; // eslint-disable-line\nimport { MarkdownContextReducerActionType, } from \"types/markdown-context-reducer-action\";\nexport default class MarkdownWorker {\n    constructor(dispatch) {\n        this.worker = new Worker();\n        this.worker.onmessage = ({ data }) => dispatch({\n            type: MarkdownContextReducerActionType.SetHtmlArray,\n            htmlArray: data,\n        });\n    }\n    parse(md) {\n        this.worker.postMessage(md);\n    }\n    terminate() {\n        if (this.worker)\n            this.worker.terminate();\n    }\n}\n","import React, { memo, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  MARKDOWN_CONTEXT_DEFAULT_INITIAL_STATE,\n  useMarkdownDispatch,\n  useMarkdownState,\n} from \"contexts/MarkdownContext\";\n\nimport { Slideshow } from \"components/Slideshow\";\nimport { usePresentation } from \"./usePresentation\";\nimport { useWorker } from \"./useWorker\";\n\nconst Div = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\nconst FullscreenButton = styled.button`\n  z-index: 10000;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n`;\n\nconst Preview = memo(function Preview() {\n  const slideshowRef = useRef<HTMLElement>(null);\n\n  const dispatch = useMarkdownDispatch();\n  const { htmlArray, md, textLineNumber } = useMarkdownState();\n\n  const requestPresentation = usePresentation(slideshowRef);\n  useWorker({ dispatch, md });\n\n  return (\n    <Div>\n      <Slideshow\n        ref={slideshowRef}\n        dispatch={dispatch}\n        htmlArray={htmlArray}\n        textLineNumber={textLineNumber}\n      />\n\n      <FullscreenButton\n        disabled={md === MARKDOWN_CONTEXT_DEFAULT_INITIAL_STATE.md}\n        onClick={() => requestPresentation()}\n        type=\"button\"\n      >\n        FULLSCREEN\n      </FullscreenButton>\n    </Div>\n  );\n});\n\nexport { Preview };\n","import { useEffect, useRef } from \"react\";\nimport MarkdownWorker from \"./markdown-worker\";\nfunction useWorker({ dispatch, md }) {\n    const workerRef = useRef(null);\n    useEffect(() => {\n        workerRef.current = new MarkdownWorker(dispatch);\n        return () => {\n            var _a;\n            (_a = workerRef.current) === null || _a === void 0 ? void 0 : _a.terminate();\n        };\n    }, [dispatch]);\n    useEffect(() => {\n        const worker = workerRef.current;\n        worker === null || worker === void 0 ? void 0 : worker.parse(md);\n    }, [md]);\n}\nexport { useWorker };\n","import styled from \"styled-components\";\nconst TEXT_AREA_LINE_HEIGHT = 18;\nconst TextArea = styled.textarea `\n  background-color: transparent;\n  border: none;\n  height: 100%;\n  outline: none;\n  resize: none;\n\n  color: ${(props) => props.theme.textColor};\n  font-size: 15px;\n  margin-bottom: 0.3em;\n  line-height: ${TEXT_AREA_LINE_HEIGHT}px;\n  padding: 0.5em;\n  tab-size: 2;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n`;\nexport { TEXT_AREA_LINE_HEIGHT, TextArea };\n","import { useEffect, useState } from \"react\";\nimport debounce from \"lodash/debounce\";\nfunction usePaneIsActive({ ref, initialValue }) {\n    const node = ref.current;\n    const [isActive, setIsActive] = useState(initialValue);\n    useEffect(() => {\n        const debounceSetIsActive = debounce((value) => setIsActive(value), 300);\n        const handleMouseEnter = () => debounceSetIsActive(true);\n        const handleMouseLeave = () => debounceSetIsActive(false);\n        node === null || node === void 0 ? void 0 : node.addEventListener(\"mouseenter\", handleMouseEnter);\n        node === null || node === void 0 ? void 0 : node.addEventListener(\"mouseleave\", handleMouseLeave);\n        return () => {\n            node === null || node === void 0 ? void 0 : node.removeEventListener(\"mouseenter\", handleMouseEnter);\n            node === null || node === void 0 ? void 0 : node.removeEventListener(\"mouseleave\", handleMouseLeave);\n        };\n    }, [node, setIsActive]);\n    return isActive;\n}\nexport { usePaneIsActive };\n"],"sourceRoot":""}