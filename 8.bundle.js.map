{"version":3,"sources":["webpack:///./src/components/TextEditor/index.tsx","webpack:///./src/components/TextEditor/useSyncTextArea.ts","webpack:///./src/components/TextEditor/useTrackTextAreaScroll.ts","webpack:///./src/components/TextEditor/TextArea.ts","webpack:///./src/utils/usePaneIsActive.ts"],"names":["Container","styled","div","props","theme","textAreaBackgroundColor","TextEditor","memo","ref","useRef","dispatch","useMarkdownDispatch","useMarkdownState","md","slideshowLineNumber","isActive","usePaneIsActive","initialValue","textAreaLineHeight","useEffect","getNode","R","calculateScrollTop","setScrollTop","scrollTop","n","useSyncTextArea","TEXT_AREA_LINE_HEIGHT","handleScroll","useMemo","throttle","ev","getScrollTop","calculateLineNumber","textLineNumber","Math","floor","type","MarkdownContextReducerActionType","SetTextLineNumber","node","current","addEventListener","passive","removeEventListener","useTrackTextAreaScroll","TextArea","autoFocus","name","onChange","SetMd","target","value","onKeyDown","keyCode","val","start","selectionStart","end","selectionEnd","substring","preventDefault","textarea","textColor","useState","setIsActive","debounceSetIsActive","debounce","handleMouseEnter","handleMouseLeave"],"mappings":"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","file":"8.bundle.js","sourcesContent":["import React, { memo, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  useMarkdownDispatch,\n  useMarkdownState,\n} from \"contexts/MarkdownContext\";\nimport { MarkdownContextReducerActionType } from \"types/markdown-context-reducer-action\";\n\nimport { usePaneIsActive } from \"utils/usePaneIsActive\";\n\nimport { TEXT_AREA_LINE_HEIGHT, TextArea } from \"./TextArea\";\nimport { useSyncTextArea } from \"./useSyncTextArea\";\nimport { useTrackTextAreaScroll } from \"./useTrackTextAreaScroll\";\n\nconst Container = styled.div`\n  background-color: ${(props) => props.theme.textAreaBackgroundColor};\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nconst TextEditor = memo(function TextEditor() {\n  const ref = useRef<HTMLTextAreaElement>(null);\n  const dispatch = useMarkdownDispatch();\n  const { md, slideshowLineNumber } = useMarkdownState();\n\n  const isActive = usePaneIsActive({ ref, initialValue: true });\n\n  useSyncTextArea({\n    ref,\n    slideshowLineNumber,\n    textAreaLineHeight: TEXT_AREA_LINE_HEIGHT,\n  });\n  useTrackTextAreaScroll({\n    dispatch,\n    isActive,\n    ref,\n    textAreaLineHeight: TEXT_AREA_LINE_HEIGHT,\n  });\n\n  const handleInputChange = (ev) => {\n    dispatch({\n      type: MarkdownContextReducerActionType.SetMd,\n      md: ev.target.value,\n    });\n  };\n  const handleKeyDown = (ev) => {\n    // support tabs\n    if (ev.keyCode === 9) {\n      const { target } = ev;\n      const val = target.value;\n      const start = target.selectionStart;\n      const end = target.selectionEnd;\n\n      target.value = `${val.substring(0, start)}\\t${val.substring(end)}`;\n      target.selectionStart = target.selectionEnd = start + 1; // eslint-disable-line no-multi-assign\n\n      ev.preventDefault();\n    }\n  };\n\n  return (\n    <Container>\n      <TextArea\n        ref={ref}\n        autoFocus\n        name=\"md\"\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n        value={md}\n      />\n    </Container>\n  );\n});\n\nexport { TEXT_AREA_LINE_HEIGHT, TextEditor };\n","import { useEffect } from \"react\";\nimport * as R from \"ramda\";\nfunction useSyncTextArea({ ref, slideshowLineNumber, textAreaLineHeight, }) {\n    /* Syncs text when slideshowLineNumber changes */\n    useEffect(() => {\n        const getNode = R.prop(\"current\");\n        const calculateScrollTop = R.multiply(textAreaLineHeight, slideshowLineNumber);\n        // TODO smooth scrolling\n        const setScrollTop = R.curry((scrollTop, n) => {\n            n.scrollTop = scrollTop; // eslint-disable-line no-param-reassign\n        });\n        R.pipe(getNode, R.unless(R.isNil, setScrollTop(calculateScrollTop)))(ref);\n    }, [ref, slideshowLineNumber, textAreaLineHeight]);\n}\nexport { useSyncTextArea };\n","import { useEffect, useMemo } from \"react\";\nimport * as R from \"ramda\";\nimport throttle from \"lodash/throttle\";\nimport { MarkdownContextReducerActionType, } from \"types/markdown-context-reducer-action\";\nfunction useTrackTextAreaScroll({ dispatch, isActive, ref, textAreaLineHeight, }) {\n    const handleScroll = useMemo(() => throttle((ev) => {\n        const getScrollTop = R.path([\"target\", \"scrollTop\"]);\n        const calculateLineNumber = R.divide(R.__, textAreaLineHeight);\n        const textLineNumber = R.pipe(getScrollTop, calculateLineNumber, Math.floor)(ev);\n        dispatch({\n            type: MarkdownContextReducerActionType.SetTextLineNumber,\n            textLineNumber,\n        });\n    }, 200), [dispatch, textAreaLineHeight]);\n    /* Adds/Removes event listener on 'scroll' depending on pane `isActive` */\n    useEffect(() => {\n        const node = ref.current;\n        isActive\n            ? node === null || node === void 0 ? void 0 : node.addEventListener(\"scroll\", handleScroll, { passive: true }) : node === null || node === void 0 ? void 0 : node.removeEventListener(\"scroll\", handleScroll);\n        return () => node === null || node === void 0 ? void 0 : node.removeEventListener(\"scroll\", handleScroll);\n    }, [isActive, handleScroll, ref]);\n}\nexport { useTrackTextAreaScroll };\n","import styled from \"styled-components\";\nconst TEXT_AREA_LINE_HEIGHT = 18;\nconst TextArea = styled.textarea `\n  background-color: transparent;\n  border: none;\n  height: 100%;\n  outline: none;\n  resize: none;\n\n  color: ${(props) => props.theme.textColor};\n  font-size: 15px;\n  margin-bottom: 0.3em;\n  line-height: ${TEXT_AREA_LINE_HEIGHT}px;\n  padding: 0.5em;\n  tab-size: 2;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n`;\nexport { TEXT_AREA_LINE_HEIGHT, TextArea };\n","import { useEffect, useState } from \"react\";\nimport debounce from \"lodash/debounce\";\nfunction usePaneIsActive({ ref, initialValue }) {\n    const node = ref.current;\n    const [isActive, setIsActive] = useState(initialValue);\n    useEffect(() => {\n        const debounceSetIsActive = debounce((value) => setIsActive(value), 300);\n        const handleMouseEnter = () => debounceSetIsActive(true);\n        const handleMouseLeave = () => debounceSetIsActive(false);\n        node === null || node === void 0 ? void 0 : node.addEventListener(\"mouseenter\", handleMouseEnter);\n        node === null || node === void 0 ? void 0 : node.addEventListener(\"mouseleave\", handleMouseLeave);\n        return () => {\n            node === null || node === void 0 ? void 0 : node.removeEventListener(\"mouseenter\", handleMouseEnter);\n            node === null || node === void 0 ? void 0 : node.removeEventListener(\"mouseleave\", handleMouseLeave);\n        };\n    }, [node, setIsActive]);\n    return isActive;\n}\nexport { usePaneIsActive };\n"],"sourceRoot":""}